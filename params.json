{"name":"Titanium PushIO Module","tagline":"","body":"# PushIO Module\r\n\r\n[![Build Status](https://travis-ci.org/TheBookPeople/titanium-pushio.svg?branch=master)](https://travis-ci.org/TheBookPeople/titanium-pushio)\r\n\r\nThis is a Titanium Mobile Mobile module project that adds PushIO\r\n(http://www.responsys.com/marketing-cloud/products/push-IO) notifications to a project. \r\n\r\nThis module currently only supports iOS. You will need a PushIO account to use this module.\r\n\r\n## Setup\r\n\r\n### Build\r\n\r\nTo build the module run the following code from the iphone folder\r\n\r\n```shell\r\n./build.py\r\n```\r\n\r\n### Install - Mac OS X\r\n\r\nExtract distribution zip file\r\nCopy modules/iphone/uk.co.tbp.pushio to ~/Library/Application Support/Titanium/modules/iphone\r\n\r\n### Register the Module\r\n\r\nRegister the module with your application by editing `tiapp.xml` and adding your module.\r\nExample:\r\n\r\n```xml\r\n<modules>\r\n\t<module version=\"1.0\">uk.co.tbp.pushio</module>\r\n</modules>\r\n```\r\n\r\n## Accessing the push-io Module\r\n\r\nTo access this module from JavaScript, you would do the following:\r\n\r\n```javascript\r\nvar push_io = require(\"uk.co.tbp.pushio\");\r\n```\r\n\r\nThe push_io variable is a reference to the Module object.\r\n\r\n\r\n\r\nWhen you run your project, the compiler will combine your module along with its dependencies and assets into the application.\r\n\r\n### pushio_config_debug.json\r\n\r\nThe  pushio_config_debug.json file that is created in the PushIO management interface needs to be copied to\r\nthe assets folder of your titanium application.\r\n\r\n### PushIOManager.framework\r\n\r\nPushIO have created a iOS framework for their service. it can be downloaded from \r\n\r\nhttps://github.com/pushio/PushIOManager_iOS\r\n\r\nThe supported version of the framework has been includede with this module\r\n\r\n\r\n### Build\r\n\r\nTo build the module run the following code from the iphone folder\r\n\r\n```\r\n./build.py\r\n```\r\n\r\n## Usage\r\n\r\n\r\n### Registering for notification\r\n\r\nUse the Ti.Network.registerForPushNotifications method to register for notifications. This is usually placed in alloy.js\r\n\r\n```javascript\r\nvar deviceToken = null;\r\nvar pushio = require('uk.co.tbp.pushio');\r\n\r\nTi.Network.registerForPushNotifications({\r\n  // Specifies which notifications to receive\r\n  types : [ Ti.Network.NOTIFICATION_TYPE_BADGE, \r\n            Ti.Network.NOTIFICATION_TYPE_ALERT, \r\n            Ti.Network.NOTIFICATION_TYPE_SOUND],\r\n  success : deviceTokenSuccess,\r\n  error : deviceTokenError,\r\n  callback : receivePush\r\n});\r\n\r\n// Process incoming push notifications\r\nfunction receivePush(e) {\r\n  pushio.recordNotification(e.data);\r\n  alert('Received push: ' + JSON.stringify(e));\r\n}\r\n\r\n// Save the device token for subsequent API calls\r\nfunction deviceTokenSuccess(e) {\r\n  pushio.registerDevice(e.deviceToken);\r\n  deviceToken = e.deviceToken;\r\n}\r\n\r\nfunction deviceTokenError(e) {\r\n  alert('Failed to register for push notifications! ' + e.error);\r\n}\r\n```  \r\n\r\n## PushIO\r\n\r\nA unique ID used by Push IO. You can use this for adding test devices at https://manage.push.io This call will always return a non-null value.\r\n\r\n```javascript\r\nTi.API.Info(push_io.pushIOUUID); \r\n``` \r\n\r\n## Categories\r\n\r\nThis section has method calls associated with notification categories.\r\n\r\n### Registering for Category\r\n\r\nTo register for a category use the registerCategory method on the push_io variable.\r\n\r\n```javascript\r\npush_io.registerCategory('Banana'); \r\n``` \r\n\r\n### Registering multiple categories\r\n\r\nTo register for multiple categories at once use the registerCategory method on the push_io variable.\r\n\r\n```javascript\r\npush_io.registerCategories(['Apples','Oranges']);\r\n``` \r\n### Unregistering category\r\n\r\nTo unregister for a category use the unregisterCategory method on the push_io variable.\r\n\r\n```javascript\r\npush_io.unregisterCategory('Banana'); \r\n``` \r\n\r\n### Unregistering for multiple categories\r\n\r\nTo unregister for a category use the unregisterCategory method on the push_io variable.\r\n\r\n```javascript\r\npush_io.unregisterCategories(['Apples','Oranges']); \r\n``` \r\n### Unregistering all categories\r\n\r\nTo unregister for a category use the unregisterCategory method on the push_io variable.\r\n\r\n```javascript\r\npush_io.unregisterAllCategories(); \r\n``` \r\n\r\n### Check if category registered\r\n\r\nThe isRegisteredForCategory method can be used to check if you are registered for a category.\r\n\r\n```javascript\r\nif(push_io.isRegisteredForCategory('Bannana')){\r\n  Ti.API.Info('We will have been registered for Bannanas');\r\n}\r\n``` \r\n\r\n## User identifier\r\n\r\nA user identifier can be assosiated with a device. If you are only using PushIO, then they recommend that you use a hash value. However\r\nif you need to integrate with Responsys you will need to use the plain value.  \r\n\r\nThe following identifies are supported for Responsys integration.\r\n\r\nEmail\r\n\r\nPhone Number\r\n\r\nCustomer Id \r\n\r\nYou must use the same identifier type for all users. \r\n\r\n### Register a user identifier\r\n\r\nTo register a user identifier with a device call the registerUserID method. This is usually done after a successfully\r\nlogout event.  \r\n\r\n```javascript\r\npush_io.registerUserID('me@example.com'); \r\n``` \r\n### Unregister a user identifier\r\n\r\nTo unregister a user identifier with a device call the unregisterUserID method. This is usually done after a successfully\r\nlogout event.\r\n\r\n```javascript\r\npush_io.unregisterUserID('me@example.com'); \r\n``` \r\n\r\n### Check if a user identifier is registered agains a device\r\n\r\nThe isRegisteredForUserID method can be used to check if you are registered for the device.\r\n\r\n```javascript\r\nif(push_io.isRegisteredForUserID('me@example.com')){\r\n  Ti.API.Info('We will have been associated with this device.');\r\n}\r\n``` \r\n\r\n### Get user identifier registered agains a device\r\n\r\nThe registeredUserID method returns the current user identifier registered for the device.\r\n\r\n```javascript\r\npush_io.registeredUserID()\r\n``` \r\n\r\n\r\n## Metrics\r\n\r\nCustom engagement metrics can be tracked using the trackEngagementCustomMetric method.  \r\n\r\n```javascript\r\npush_io.trackEngagementCustomMetric('Purchased')\r\n``` \r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}